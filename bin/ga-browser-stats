#!/usr/bin/env node

var fs = require('fs-extra');
var path = require('path');
var util = require('util');
var program = require('commander');
var Promise = require('bluebird');
var defaults = require('lodash-node/modern').defaults;
var pick = require('lodash-node/modern').pick;

var log = require('../lib/log');
var auth = require('../lib/auth');
var api = require('../lib/api');
var report = require('../lib/report');

var readJSON = Promise.promisify(fs.readJSON);
var writeJSON = Promise.promisify(fs.writeJSON);


function getPackageInfo() {
  var basePath = path.normalize(__dirname + path.sep + '..');
  var pkgFile = path.join(basePath, 'package.json');
  return readJSON(pkgFile)
    .bind(this)
    .then(function(data) {
      this.pkg = data
    });
}

function runCLI() {
  program
    .version(this.pkg.version)
    .usage('[options]')
    .option('-i, --ids [value]', 'the ID of the view to query', gaOptional)
    .option('-m, --metric [metric]',
      'the metric to query [sessions]', gaOptional, 'ga:sessions')
    .option('-d, --days [count]',
      'the number of days to include in the query [30]', '30')
    .option('-c, --config-file [file]',
      'a JSON file with config data [ga-config.json]',
      'ga-config.json')
    .option('-o, --output-file [file]',
      'the file to output results to [ga-browser-stats.json]',
      'ga-browser-stats.json')
    .option('-t, --token-file [file]',
      'the file to store the oauth2 access and refresh tokens [.ga-tokens]',
      '.ga-tokens')
    .option('-t, --threshold [percentage]',
      'exclude results whose percentage of the total is below this amount [0]',
      '0')
    .option('-v, --verbose',
      'print more detailed progress information to the console');

  program.parse(process.argv);

  this.config = {};
  program.options.forEach(function(option) {
    var key = camelCase(option.long.slice(2))
    if (key == 'version') return;
    var value = program[key];
    if (value != null) this.config[key] = value;
  }.bind(this));

  // Set the logger to verbose mode if specified.
  log.verbose = this.config.verbose;
}

function getConfig() {
  return readJSON(this.config.configFile)
    .bind(this)
    .then(function(data) {
      defaults(this.config, data);
    })
    .catch(function() {
      // It's OK if the config file doesn't exists.
      log('No config file found, moving on.');
    })
    .then(function() {
      if (!this.config.ids) {
        console.log('\n' +
          'Error: '.red + 'The "ids" option is required.\n' +
          'It must be specified in the config file or as a command ' +
          'line option.\n'
        );
        process.exit(1);
      }
    });
}

function onComplete() {
  console.log('Success! '.green + 'Report saved to ' + this.config.outputFile);
}

function camelCase(str) {
  var pattern = /\-\w/;
  return str.replace(pattern, function(match) {
    return match[1].toUpperCase();
  });
}

function gaOptional(str) {
  return str.substr(0,3) == 'ga:' ? str : 'ga:' + str;
}

function showStackTrace(err) {
  console.error(err.stack);
}

/**
 * An object that will be bound to each promise as its context.
 */
var data = {};

Promise.bind(data)
  .then(getPackageInfo)
  .then(runCLI)
  .then(getConfig)
  .then(auth.getAccessToken)
  .then(api.query)
  .then(report.output)
  .then(onComplete)
  .catch(showStackTrace);
